CREATE DATABASE IF NOT EXISTS loja;

-- Usar banco de dados
USE loja;

-- Criar tabela de produtos
CREATE TABLE IF NOT EXISTS produtos (
id INT AUTO_INCREMENT PRIMARY KEY,
nome VARCHAR(100) NOT NULL,
preco DECIMAL(10, 2) NOT NULL,
estoque INT NOT NULL DEFAULT 0
);

-- Criar tabela de vendas
CREATE TABLE IF NOT EXISTS vendas (
id INT AUTO_INCREMENT PRIMARY KEY,
formaPagamento VARCHAR(50) NOT NULL,
valorTotal DECIMAL(10, 2) NOT NULL,
dataVenda TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Criar tabela de vendasItens
CREATE TABLE IF NOT EXISTS vendasItens (
id INT AUTO_INCREMENT PRIMARY KEY,
codVenda INT NOT NULL,
codProduto INT NOT NULL,
quantidade INT NOT NULL,
valorItem DECIMAL(10, 2) NOT NULL,
valorTotal DECIMAL(10, 2) AS (quantidade * valorItem) STORED,
FOREIGN KEY (codVenda) REFERENCES vendas(id),
FOREIGN KEY (codProduto) REFERENCES produtos(id)
);

-- Criar tabela de financeiro
CREATE TABLE IF NOT EXISTS financeiro (
id INT AUTO_INCREMENT PRIMARY KEY,
tipo VARCHAR(50) NOT NULL,
nome VARCHAR(100) NOT NULL,
valor DECIMAL(10, 2) NOT NULL,
data DATE NOT NULL
);

create table usuario (
login VARCHAR(20) PRIMARY KEY,
senha VARCHAR(255) NOT NULL
);

-- Trigger para atualizar o estoque e registrar a venda no financeiro ap√≥s uma venda
DELIMITER //
CREATE TRIGGER atualizar_estoque_venda
AFTER INSERT ON vendasItens
FOR EACH ROW
BEGIN
    -- Atualizar estoque
    UPDATE produtos
    SET estoque = estoque - NEW.quantidade
    WHERE id = NEW.codProduto;

    -- Inserir registro no financeiro
    INSERT INTO financeiro (tipo, nome, valor, data)
    VALUES ('credito', CONCAT('venda id:', NEW.codVenda), NEW.valorTotal, (SELECT dataVenda FROM vendas WHERE id = NEW.codVenda));
END;

//
DELIMITER ;